import xml.etree.ElementTree as ET
from array import array

from custom_components.wattrouter.time_schedule_mode_parser import (
    TimeScheduleArgs,
    parse_time_schedule,
)

from .state import (
    MeasurementData,
    SSRState,
    ANDIState,
    SettingsData,
    TimePlanSettings,
    TimePlanState,
    DayStats,
)


class XmlParser:
    """Parser for XML generated by wattrouter"""

    def parse_measurement(self, xml: str) -> MeasurementData:
        root = ET.fromstring(xml)
        return MeasurementData(
            i1_power=self.__parse_float(root.find("I1"), "P"),
            i2_power=self.__parse_float(root.find("I2"), "P"),
            i3_power=self.__parse_float(root.find("I3"), "P"),
            total_power=self.__parse_float(root, "PPS"),
            ssr1=self.__get_ssr_state("O1", root),
            ssr2=self.__get_ssr_state("O2", root),
            ssr3=self.__get_ssr_state("O3", root),
            ssr4=self.__get_ssr_state("O4", root),
            ssr5=self.__get_ssr_state("O5", root),
            ssr6=self.__get_ssr_state("O6", root),
            andi1=self.__get_andi_state("I4", root),
            andi2=self.__get_andi_state("I5", root),
            andi3=self.__get_andi_state("I6", root),
            andi4=self.__get_andi_state("I7", root),
            relay1=self.__get_ssr_state("O7", root),
            relay2=self.__get_ssr_state("O8", root),
            temperature1=self.__parse_float(root, "DQ1"),
            temperature2=self.__parse_float(root, "DQ2"),
            temperature3=self.__parse_float(root, "DQ3"),
            temperature4=self.__parse_float(root, "DQ4"),
            voltage=self.__parse_float(root, "VAC"),
            firmware_version=root.find("FW").text,
            serial_number=root.find("SN").text,
            low_tariff_active=bool(int(root.find("ILT").text)),
            combiwatt_active=bool(int(root.find("ICW").text)),
            test_active=bool(int(root.find("ITS").text)),
        )

    def parse_setting(self, xml: str) -> SettingsData:
        root = ET.fromstring(xml)
        return SettingsData(time_plans=self.get_time_plans(root))

    def parse_day_stats(self, xml: str) -> DayStats:
        root = ET.fromstring(xml)
        return DayStats(
            L1_reverse_energy=self.__parse_float(root, "SDS1"),
            L2_reverse_energy=self.__parse_float(root, "SDS2"),
            L3_reverse_energy=self.__parse_float(root, "SDS3"),
            total_reverse_energy=self.__parse_float(root, "SDS4"),
            L1_forward_low_tariff_energy=self.__parse_float(root, "SDL1"),
            L2_forward_low_tariff_energy=self.__parse_float(root, "SDL2"),
            L3_forward_low_tariff_energy=self.__parse_float(root, "SDL3"),
            total_forward_low_tariff_energy=self.__parse_float(root, "SDL4"),
            L1_forward_high_tariff_energy=self.__parse_float(root, "SDH1"),
            L2_forward_high_tariff_energy=self.__parse_float(root, "SDH2"),
            L3_forward_high_tariff_energy=self.__parse_float(root, "SDH3"),
            total_forward_high_tariff_energy=self.__parse_float(root, "SDH4"),
            L1_production_energy=self.__parse_float(root, "SDP1"),
            L2_production_energy=self.__parse_float(root, "SDP2"),
            L3_production_energy=self.__parse_float(root, "SDP3"),
            total_production_energy=self.__parse_float(root, "SDP4"),
            SSR1_energy=self.__parse_float(root, "SDO1"),
            SSR2_energy=self.__parse_float(root, "SDO2"),
            SSR3_energy=self.__parse_float(root, "SDO3"),
            SSR4_energy=self.__parse_float(root, "SDO4"),
            SSR5_energy=self.__parse_float(root, "SDO5"),
            SSR6_energy=self.__parse_float(root, "SDO6"),
            relay1_energy=self.__parse_float(root, "SDO7"),
            relay2_energy=self.__parse_float(root, "SDO8"),
            wsl1_energy=self.__parse_float(root, "SDO9"),
            wsl2_energy=self.__parse_float(root, "SDO10"),
            wsl3_energy=self.__parse_float(root, "SDO11"),
            wsl4_energy=self.__parse_float(root, "SDO12"),
            wsl5_energy=self.__parse_float(root, "SDO13"),
            wsl6_energy=self.__parse_float(root, "SDO14"),
            andi1_energy=self.__parse_float(root, "SDI1"),
            andi2_energy=self.__parse_float(root, "SDI2"),
            andi3_energy=self.__parse_float(root, "SDI3"),
            andi4_energy=self.__parse_float(root, "SDI4"),
        )

    def get_time_plans(self, root: ET.Element) -> array:
        time_plans = []
        for ssr_index in range(1, 17):
            for plan_index in range(1, 5):
                name = f"TS{ssr_index}{plan_index}"
                time_plan = root.find(name)
                time_plans.append(
                    parse_time_schedule(
                        TimeScheduleArgs(
                            name=name,
                            mode=int(time_plan.find("M").text),
                            start_str=time_plan.find("N").text,
                            end_str=time_plan.find("F").text,
                            energy_limit=self.__parse_float(time_plan, "Li"),
                            power_percentage=self.__parse_float(time_plan, "P"),
                            temperature_input=int(time_plan.find("TI").text),
                            temperature_threshold=self.__parse_float(time_plan, "TT"),
                        )
                    )
                )

        return time_plans

    def __get_ssr_state(self, input_name: str, root: ET.Element) -> SSRState:
        input = root.find(input_name)
        return SSRState(
            power=self.__parse_float(input, "P"),
            energy=self.__parse_float(input, "E"),
            combiwatt_active=bool(int(input.find("HC").text)),
            forced_active=bool(int(input.find("HE").text)),
            limit_active=bool(int(input.find("HR").text)),
            regulated=bool(int(input.find("HN").text)),
            test_active=bool(int(input.find("T").text)),
        )

    def __get_andi_state(self, input_name: str, root: ET.Element) -> ANDIState:
        input = root.find(input_name)

        power_text = input.find("P").text
        binary_on = True if power_text == "1" else False if power_text == "0" else None

        return ANDIState(
            power=float(power_text) if binary_on is None else None,
            energy=self.__parse_float(input, "E"),
            binary_on=binary_on,
        )

    def __parse_float(self, element: ET.Element, key: str) -> float | None:
        child = element.find(key)
        text = child.text if child is not None else None
        return float(text) if text is not None and text != "X.X" else None
